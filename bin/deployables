#!/bin/bash

# based on https://github.com/circleci/go-ecs-ecr/blob/master/deploy.sh

##
## configure debugging
##

if [ ! -z "${DEPLOY_DEBUG}" ] ; then
    set -x
fi


##
## environment variables
##

#
# optional
#

DEPLOY_DOCKERFILE=${DEPLOY_DOCKERFILE:-./Dockerfile}
DEPLOY_DOCKER_LOCAL_TAG=${DEPLOY_DOCKER_LOCAL_TAG:-$DEPLOY_APP_NAME}

DEPLOY_ECS_CLUSTER_NAME=${DEPLOY_ECS_CLUSTER_NAME:-$DEPLOY_APP_NAME}

DEPLOY_AWS_CONFIG="${DEPLOY_AWS_CONFIG:-~/.aws/config}"
DEPLOY_AWS_REGION="${DEPLOY_AWS_REGION:-us-east-1}"
DEPLOY_AWS_PROFILE="${DEPLOY_AWS_PROFILE:-deployables}"
DEPLOY_AWS_ROLE="${DEPLOY_AWS_ROLE:-ops-admin}"
DEPLOY_AWS_SOURCE_PROFILE="${DEPLOY_AWS_SOURCE_PROFILE:-default}"

DEPLOY_SHA1="${DEPLOY_SHA1:-$CIRCLE_SHA1}"

# more bash-friendly output for jq
JQ="jq --raw-output --exit-status"



##
## private functions
##

function check_environment {

	if [ -z "${DEPLOY_AWS_ACCOUNT}" ] ; then
		echo "Error: DEPLOY_AWS_ACCOUNT is required"
		exit 1
	fi

	if [ -z "${DEPLOY_ECR_ACCOUNT}" ] ; then
		echo "Error: DEPLOY_ECR_ACCOUNT is required"
		exit 1
	fi

}

function aws_configure {

    echo
    echo "Configuring AWS CLI"
    echo

	# check environment variables
	# check_environment

    aws --version
#    aws configure set default.region ${DEPLOY_AWS_REGION}
#    aws configure set default.output json

    cat >> $( eval echo -n $DEPLOY_AWS_CONFIG ) <<EOH
## added by deployables.aws_configure()
[profile ${DEPLOY_AWS_PROFILE}]
role_arn = arn:aws:iam::${DEPLOY_AWS_ACCOUNT}:role/${DEPLOY_AWS_ROLE}
source_profile = ${DEPLOY_AWS_SOURCE_PROFILE}
region=${DEPLOY_AWS_REGION}
output=json
EOH

    if [[ $? != 0 ]] ; then
        echo "Error updating aws config, DEPLOY_AWS_CONFIG=${DEPLOY_AWS_CONFIG}"
        exit 1
    fi
}

function ecr_login () {

    echo
    echo Logging in to ECR
    echo DEPLOY_AWS_PROFILE: ${DEPLOY_AWS_PROFILE}
    echo DEPLOY_AWS_ACCOUNT: ${DEPLOY_AWS_ACCOUNT}
    echo DEPLOY_ECR_ACCOUNT: ${DEPLOY_ECR_ACCOUNT}
    echo

	# check environment variables
	check_environment

	login_command=$(
		aws --profile=${DEPLOY_AWS_PROFILE} ecr get-login
	)

	if [[ ! "$login_command" =~ "https://${DEPLOY_AWS_ACCOUNT}" ]]; then
		echo Error: Login command does not match DEPLOY_AWS_ACCOUNT: ${DEPLOY_AWS_ACCOUNT}
		echo Error: Check that DEPLOY_AWS_ROLE="${DEPLOY_AWS_ROLE}" is as valid role in DEPLOY_AWS_ACCOUNT="${DEPLOY_AWS_ACCOUNT}"
		echo login_command: ${login_command}
		return 1
	fi

     login_command=$(
    	echo ${login_command} \
        | sed -e "s/${DEPLOY_AWS_ACCOUNT}/${DEPLOY_ECR_ACCOUNT}/"
    )

	if [[ ! "$login_command" =~ "https://${DEPLOY_ECR_ACCOUNT}" ]]; then
		echo Error: Login command does not match DEPLOY_ECR_ACCOUNT: ${DEPLOY_ECR_ACCOUNT}
		echo login_command: ${login_command}
		return 1
	fi

	eval ${login_command}
}

function ecr_tag_image () {

    local base_tag=$1
    local target_tag=$2

    echo
    echo Tagging image
    echo base_tag: ${base_tag}
    echo target_tag: ${target_tag}
    echo

	if [[ -z "${base_tag}" || -z "${target_tag}" ]] ; then
		echo "Error: usage: ecr_tag_image <$base_tag> <target_tag>"
		return 1
	fi

    docker tag $base_tag $target_tag

    if [[ "$?" == 1 ]] ; then
    	echo "Error tagging target_tag=${target_tag}"
    	return 1
    fi

}

function ecr_pull_image () {

    local remote_tag=$1

    echo
    echo Pulling and Retagging image
    echo remote_tag: ${remote_tag}
    echo

	if [[ -z "${remote_tag}" ]] ; then
		echo "Error: usage: ecr_pull_and_retag_image <$remote_tag>"
		return 1
	fi

    docker pull $remote_tag

    if [[ "$?" == 1 ]] ; then
    	echo "Error pulling remote_tag=${remote_tag}"
    	return 1
    fi

}

function ecr_push_image () {

    local image=$1

    echo
    echo Pushing image
    echo image: ${image}
    echo

    docker push $image

    if [ $? != 0 ] ; then
        echo "Error: Unable to push image, ${image}"
        exit 1
    fi

}

function ecs_deploy_task () {

    local image="$1"
    local subfamily="$2"

    echo
    echo Deploying ECS task
    echo image: ${image}
    echo subfamily: ${subfamily}
    echo

    if [ -z "$subfamily" ] ; then
        family="${DEPLOY_APP_NAME}"
        service="${DEPLOY_APP_NAME}"
    else
        family="${DEPLOY_APP_NAME}-${subfamily}"
        service="${DEPLOY_APP_NAME}-${subfamily}"
    fi

    echo
    echo "Remembering current task definition, family: ${family}"
    echo

    previous_version=$( \
        aws ecs describe-services \
            --profile ${DEPLOY_AWS_PROFILE} \
            --cluster ${DEPLOY_ECS_CLUSTER_NAME} \
            --services ${service} \
            | $JQ '.services[0].taskDefinition' \
    )

    echo
    echo "Registering new task definition, family: ${family}"
    echo

    task_def_template=${DEPLOY_TASK_DEF_TEMPLATE//-FAMILY/-$subfamily}

    if [[ ! -f ${task_def_template} ]] ; then
        echo "Unable to find task definition template, task_def_template: ${task_def_template}"
        exit 1
    fi

    task_def=$( \
        DEPLOY_IMAGE_NAME=${image} \
        DEPLOY_ECS_CLUSTER_NAME=${DEPLOY_ECS_CLUSTER_NAME} \
        DEPLOY_SUBFAMILY=${subfamily} \
        DEPLOY_AWS_REGION=${DEPLOY_AWS_REGION} \
        ${DEPLOY_ENVSUBST_COMMAND:-envsubst} < "${task_def_template}"
    )

    if [[ -z "${DEPLOY_TASK_ROLE_ARN}" ]] ; then
        revision_target=$( \
            aws ecs register-task-definition \
                --profile ${DEPLOY_AWS_PROFILE} \
                --container-definitions "$task_def" \
                --family "${family}" \
                | $JQ '.taskDefinition.taskDefinitionArn' \
        )
    else
        revision_target=$( \
            aws ecs register-task-definition \
                --profile ${DEPLOY_AWS_PROFILE} \
                --task-role-arn "${DEPLOY_TASK_ROLE_ARN}" \
                --container-definitions "$task_def" \
                --family "${family}" \
                | $JQ '.taskDefinition.taskDefinitionArn' \
        )
    fi

    if [ -z "$revision_target" ] ; then
        echo "Failed to register task definition"
        exit 1
    fi
    echo "Target Revision: $revision_target"

    echo
    echo Updating service
    echo service: ${service}
    echo revision_target: ${revision_target}
    echo

    revision_actual=$( \
        aws ecs update-service \
            --profile ${DEPLOY_AWS_PROFILE} \
            --cluster ${DEPLOY_ECS_CLUSTER_NAME} \
            --service ${service} \
            --task-definition $revision_target \
            | $JQ '.service.taskDefinition' \
        )

    if [ "$revision_target" != "$revision_actual" ] ; then
        echo "Error updating service. Target does not match actual: ${revision_target} != ${revision_actual} "
        exit 1
    fi

    # part one of some bash craziness to pass the revision_target
    key="revision_target_$( echo $family | tr -s - _ )"
    eval "$key=${revision_target}"
    echo key : $key : ${!key}

}

function ecs_verify_deploy () {

    local subfamily="$1"

    if [ -z "$subfamily" ] ; then
        family="${DEPLOY_APP_NAME}"
        service="${DEPLOY_APP_NAME}"
    else
        family="${DEPLOY_APP_NAME}-${subfamily}"
        service="${DEPLOY_APP_NAME}-${subfamily}"
    fi

    # part two of some bash craziness to receive the revision_target
    key="revision_target_$( echo $family | tr -s - _ )"
    revision_target=${!key}

    echo
    echo Verifying deploy
    echo revision_target: $revision_target
    echo

    # wait for older revisions to disappear
    for attempt in {1..60}; do

        revision_deployed=$( \
            aws ecs describe-services \
                --profile ${DEPLOY_AWS_PROFILE} \
                --cluster ${DEPLOY_ECS_CLUSTER_NAME} \
                --services ${service} \
                | $JQ ".services[0].deployments | .[] | select(.taskDefinition != \"$revision_target\") | .taskDefinition" \
            )

        if [ -z "$revision_deployed" ] ; then
            echo "Success: Deployed!"
            return 0
        fi

        echo "Waiting for update:"
        echo "  revision_target: ${revision_target}"
        echo "  revision_deployed: ${revision_deployed}"
        sleep 5

    done

    echo "Error: Service update took too long."
    exit 1
}


##
## public functions
##

function docker_build {

    echo
    echo Building docker image
	echo DEPLOY_DOCKERFILE: ${DEPLOY_DOCKERFILE}
	echo DEPLOY_DOCKER_LOCAL_TAG: ${DEPLOY_DOCKER_LOCAL_TAG}
    echo

	if [ -z "${DEPLOY_DOCKERFILE}" ] ; then
		echo "Error: DEPLOY_DOCKERFILE is required"
		return 1
	fi

	if [ -z "${DEPLOY_DOCKER_LOCAL_TAG}" ] ; then
		echo "Error: DEPLOY_DOCKER_LOCAL_TAG is required"
		return 1
	fi

	if [[ ! -z "${DEPLOY_GITHUB_MACHINE_USER_KEY_FINGERPRINT}" ]] ; then

		fingerprint="$( echo ${DEPLOY_GITHUB_MACHINE_USER_KEY_FINGERPRINT} | tr -d : )"

		eval keyfile="~/.ssh/id_${fingerprint}"

		if [[ ! -f ${keyfile} ]] ; then
			echo "Error: Unable to find machine user key file"
			echo "- fingerprint: ${fingerprint}"
			echo "- keyfile: ${keyfile}"

            eval keyfile="~/.ssh/id_circleci_github"

            if [[ ! -f ${keyfile} ]] ; then
                echo "Error: Unable to find circle github key file"
                echo "- keyfile: ${keyfile}"
                return 1
            fi

		fi

		echo "Using GITHUB_MACHINE_USER_KEY=${keyfile}"

		docker build \
			--rm=false \
			--no-cache \
			--build-arg GITHUB_MACHINE_USER_KEY="$(< ${keyfile} )" \
			-t ${DEPLOY_DOCKER_LOCAL_TAG} \
			-f ${DEPLOY_DOCKERFILE} \
			.

	else

		docker build \
			--rm=false \
			-t ${DEPLOY_DOCKER_LOCAL_TAG} \
			-f ${DEPLOY_DOCKERFILE} \
			.

	fi

}

function ecs_deploy () {

	# check environment variables
	check_environment

    # setup aws
    aws_configure
    ecr_login

    #
    # push images
    #

    if [ ! -z "${DEPLOY_RETAG_AND_PUSH}" ] ; then

        remote_tag="${DEPLOY_ECR_HOST}/${DEPLOY_APP_NAME}:${DEPLOY_RETAG_REMOTE_TAG}"
        target_tag="${DEPLOY_ECR_HOST}/${DEPLOY_APP_NAME}:${DEPLOY_RETAG_TARGET_TAG}"

        echo
        echo DEPLOY_RETAG_AND_PUSH: ${DEPLOY_RETAG_AND_PUSH}
        echo remote_tag: ${remote_tag}
        echo target_tag: ${target_tag}
        echo

        ecr_pull_image \
            $remote_tag

        ecr_tag_image \
            $remote_tag \
            $target_tag

        ecr_push_image \
            $target_tag

        DEPLOY_IMAGE="${target_tag}"

    else

        target_tag="${DEPLOY_ECR_HOST}/${DEPLOY_APP_NAME}:$( date +%Y%m%d )-${DEPLOY_SHA1}"

        echo
        echo Pushing primary tag
        echo target_tag: ${target_tag}
        echo

        ecr_tag_image \
            $DEPLOY_DOCKER_LOCAL_TAG \
            $target_tag

        ecr_push_image \
            $target_tag

        if [ ! -z "$DEPLOY_PUSH_SECONDARY_TAG" ] ; then

            secondary_tag="${DEPLOY_ECR_HOST}/${DEPLOY_APP_NAME}:${DEPLOY_PUSH_SECONDARY_TAG}"

            echo
            echo Pushing secondary tag
            echo secondary_tag: ${secondary_tag}
            echo

            ecr_tag_image \
                $target_tag \
                $secondary_tag

            ecr_push_image \
                $secondary_tag
        fi

        DEPLOY_IMAGE="${target_tag}"

    fi

    if [ -z "${DEPLOY_IMAGE}" ] ; then
        echo "Error: deploy image is undefined, DEPLOY_IMAGE=${DEPLOY_IMAGE}"
        exit 1
    fi

    #
    # deploy task defs
    #

    # deploy all the tasks first...
    if [ -z "$DEPLOY_ECS_FAMILIES" ] ; then

        ecs_deploy_task $DEPLOY_IMAGE
        ecs_verify_deploy

    else

        for family in $DEPLOY_ECS_FAMILIES
        do
            ecs_deploy_task $DEPLOY_IMAGE $family
        done

        for family in $DEPLOY_ECS_FAMILIES
        do
            ecs_verify_deploy $family
        done

    fi

}

function deploy_lambda () {

    # check environment variables
    if [ -z "${DEPLOY_AWS_ACCOUNT}" ] ; then
        echo "Error: DEPLOY_AWS_ACCOUNT is required"
        exit 1
    fi

    if [ -z "${DEPLOY_LAMBDA_FUNCTION_NAME}" ] ; then
        echo "Error: DEPLOY_LAMBDA_FUNCTION_NAME is required"
        exit 1
    fi

    if [ -z "${DEPLOY_LAMBDA_FUNCTION_ROLE}" ] ; then
        echo "Error: DEPLOY_LAMBDA_FUNCTION_ROLE is required"
        exit 1
    fi

    # setup aws
    aws_configure

    #
    # zip into deploy package
    #
    pushd "${DEPLOY_LAMBDA_FUNCTION_ZIP_DIR:-.}"
    zip -q -r ../$DEPLOY_LAMBDA_FUNCTION_NAME .
    popd

    if [[ "$?" != "0" ]] ; then
        echo "Error: Failed to create lambda zip archive"
        exit 1
    fi

    lamdba_runtime="${DEPLOY_LAMBDA_FUNCTION_RUNTIME:-nodejs4.3}"
    lamdba_handler="${DEPLOY_LAMBDA_FUNCTION_HANDLER:-index.handler}"
    lambda_role="arn:aws:iam::${DEPLOY_AWS_ACCOUNT}:role/${DEPLOY_LAMBDA_FUNCTION_ROLE}"

    lambda_env_template="${DEPLOY_LAMBDA_FUNCTION_ENV_TEMPLATE:-environment.txt}"

    lambda_env=$( \
        ${DEPLOY_ENVSUBST_COMMAND:-envsubst} < "${lambda_env_template}"
    )

    # create lambda function
    lambda_function_arn=$( \
        aws lambda create-function \
            --profile "${DEPLOY_AWS_PROFILE}" \
            --function-name "${DEPLOY_LAMBDA_FUNCTION_NAME}" \
            --description "${DEPLOY_LAMBDA_FUNCTION_DESCRIPTION}" \
            --role "${lambda_role}" \
            --handler "${lamdba_handler}" \
            --runtime "${lamdba_runtime}" \
            --environment "${lambda_env}" \
            --zip-file "fileb://../${DEPLOY_LAMBDA_FUNCTION_NAME}.zip" \
            | $JQ ".FunctionArn"
    )

    # try to update the lamda function if creation failed
    if [[ -z "$lambda_function_arn" ]] ; then

        lambda_function_arn=$( \
            aws lambda update-function-configuration \
                --profile "${DEPLOY_AWS_PROFILE}" \
                --function-name "${DEPLOY_LAMBDA_FUNCTION_NAME}" \
                --description "${DEPLOY_LAMBDA_FUNCTION_DESCRIPTION}" \
                --role "${lambda_role}" \
                --handler "${lamdba_handler}" \
                --environment "${lambda_env}" \
                --runtime "${lamdba_runtime}" \
                | $JQ ".FunctionArn"
        )

        # update lambda function
        aws lambda update-function-code \
            --profile "${DEPLOY_AWS_PROFILE}" \
            --function-name "${DEPLOY_LAMBDA_FUNCTION_NAME}" \
            --zip-file "fileb://../${DEPLOY_LAMBDA_FUNCTION_NAME}.zip"

    fi

    if [[ -z "$lambda_function_arn" ]] ; then
        echo "Error: Failed to deploy lambda function"
        exit 1
    fi

    if [[ ! -z "${DEPLOY_LAMBDA_EVENT_RULE}" ]] ; then
        deploy_lambda_event_rule \
            $DEPLOY_LAMBDA_FUNCTION_NAME \
            $lambda_function_arn
    fi

}

function deploy_lambda_event_rule {

    lambda_function_name="$1"
    lambda_function_arn="$2"

    if [ -z "${lambda_function_name}" ] ; then
        echo "Error: Passing a 'lambda_function_name' is required"
        exit 1
    fi

    if [ -z "${lambda_function_arn}" ] ; then
        echo "Error: Passing a 'lambda_function_arn' is required"
        exit 1
    fi

    if [[ -z "${DEPLOY_LAMBDA_EVENT_RULE}" ]] ; then
        echo "Error: DEPLOY_LAMBDA_EVENT_RULE is required"
        exit 1
    fi

    event_rule_name="${lambda_function_name}_rule"

    # create or update a cloudwatch event rule
    event_rule_arn=$( \
        aws events put-rule \
            --profile "${DEPLOY_AWS_PROFILE}" \
            --name "${event_rule_name}" \
            --schedule-expression "${DEPLOY_LAMBDA_EVENT_RULE}" \
            | $JQ ".RuleArn"
    )

    # give permissions
    aws lambda add-permission \
        --profile "${DEPLOY_AWS_PROFILE}" \
        --function-name "${lambda_function_arn}" \
        --statement-id "1" \
        --action "lambda:InvokeFunction" \
        --principal "events.amazonaws.com" \
        --source-arn "${event_rule_arn}"

    # add the lambda function to the created rule (i.e.,target the lambda function with the newly created rule)
    failed_entry_count=$( \
        aws events put-targets \
            --profile "${DEPLOY_AWS_PROFILE}" \
            --rule "${event_rule_name}" \
            --targets "[{ \"Id\" : \"1\", \"Arn\": \"${lambda_function_arn}\"}]" \
            | $JQ ".FailedEntryCount"
    )

    if [[ "${failed_entry_count}" != "0" ]] ; then
        echo "Error: Failed associating event rule to lambda function"
        exit 1
    fi

}

##
## MAIN
##

# call arguments verbatim:
$@
