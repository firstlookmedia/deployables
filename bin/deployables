#!/bin/bash

# based on https://github.com/circleci/go-ecs-ecr/blob/master/deploy.sh

##
## configure debugging
##

if [[ ! -z "${DEPLOY_DEBUG}" ]] ; then
    set -x
fi

##
## environment variables
##

# circle v2 hack: source env file
if [[ ! -z "${DEPLOY_ENV_FILE}" ]] ; then
  echo DEPLOY_ENV_FILE: $DEPLOY_ENV_FILE
  source $DEPLOY_ENV_FILE
else
  echo "Info: DEPLOY_ENV_FILE is not defined"
fi

#
# optional
#

DEPLOY_DOCKERFILE=${DEPLOY_DOCKERFILE:-./Dockerfile}
DEPLOY_DOCKER_LOCAL_TAG=${DEPLOY_DOCKER_LOCAL_TAG:-$DEPLOY_APP_NAME}

DEPLOY_ECS_CLUSTER_NAME=${DEPLOY_ECS_CLUSTER_NAME:-$DEPLOY_APP_NAME}

DEPLOY_AWS_CONFIG="${DEPLOY_AWS_CONFIG:-~/.aws/config}"
DEPLOY_AWS_REGION="${DEPLOY_AWS_REGION:-us-east-1}"
DEPLOY_AWS_PROFILE="${DEPLOY_AWS_PROFILE:-deployables}"
DEPLOY_AWS_ROLE="${DEPLOY_AWS_ROLE:-ops-admin}"
DEPLOY_AWS_SOURCE_PROFILE="${DEPLOY_AWS_SOURCE_PROFILE:-default}"

DEPLOY_SHA1="${DEPLOY_SHA1:-$CIRCLE_SHA1}"

# more bash-friendly output for jq
JQ="jq --raw-output --exit-status"

DEPLOY_CURRENT_TIME="$(date +%Y%m%d)"

##
## lambda defaults
##

DEPLOY_LAMBDA_FUNCTION_RUNTIME="${DEPLOY_LAMBDA_FUNCTION_RUNTIME:-nodejs6.10}"
DEPLOY_LAMBDA_FUNCTION_HANDLER="${DEPLOY_LAMBDA_FUNCTION_HANDLER:-index.handler}"
DEPLOY_LAMBDA_FUNCTION_TIMEOUT="${DEPLOY_LAMBDA_FUNCTION_TIMEOUT:-3}"
DEPLOY_LAMBDA_FUNCTION_MEMORY_SIZE="${DEPLOY_LAMBDA_FUNCTION_MEMORY_SIZE:-128}"


##
## private functions
##

function check_environment {

    if [[ -z "${DEPLOY_AWS_ACCOUNT}" ]] ; then
        echo "Error: DEPLOY_AWS_ACCOUNT is required"
        exit 1
    fi

    if [[ -z "${DEPLOY_ECR_ACCOUNT}" ]] ; then
        echo "Error: DEPLOY_ECR_ACCOUNT is required"
        exit 1
    fi

}

function aws_configure {

    echo
    echo "Configuring AWS CLI"
    echo

    if [[ -n $aws_configure_done ]]; then
      return
    fi

    if [[ -z "${DEPLOY_AWS_ACCOUNT}" ]] ; then
        echo "Error: DEPLOY_AWS_ACCOUNT is required"
        exit 1
    fi

    aws --version

    # circle v2 hack
    if [[ ! -d ~/.aws ]] ; then
        mkdir -p ~/.aws

        cat >> $( eval echo -n ~/.aws/credentials ) <<EOH
[${DEPLOY_AWS_SOURCE_PROFILE}]
aws_access_key_id=${AWS_ACCESS_KEY_ID}
aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}
EOH

        cat >> $( eval echo -n $DEPLOY_AWS_CONFIG ) <<EOH
[profile ${DEPLOY_AWS_SOURCE_PROFILE}]
region=${DEPLOY_AWS_REGION}
EOH
    else
      $( eval grep $DEPLOY_AWS_PROFILE $DEPLOY_AWS_CONFIG > /dev/null )
      if [[ $? == 0 ]] ; then
        echo "AWS credentials are alreayd configured"
        return
      fi
    fi

    cat >> $( eval echo -n $DEPLOY_AWS_CONFIG ) <<EOH
## added by deployables.aws_configure()
[profile ${DEPLOY_AWS_PROFILE}]
role_arn = arn:aws:iam::${DEPLOY_AWS_ACCOUNT}:role/${DEPLOY_AWS_ROLE}
source_profile = ${DEPLOY_AWS_SOURCE_PROFILE}
region=${DEPLOY_AWS_REGION}
output=json
EOH

    if [[ $? != 0 ]] ; then
        echo "Error updating aws config, DEPLOY_AWS_CONFIG=${DEPLOY_AWS_CONFIG}"
        exit 1
    fi

    aws_configure_done=1
}

function aws_test_profile {
  aws_configure
  aws --profile=${DEPLOY_AWS_PROFILE} s3 ls
}

function aws_run () {
  aws_configure
  aws --profile=${DEPLOY_AWS_PROFILE} ${@:1}
}

##
## docker
##

function docker_build {

    echo
    echo Building docker image
    echo DEPLOY_DOCKERFILE: ${DEPLOY_DOCKERFILE}
    echo DEPLOY_DOCKER_LOCAL_TAG: ${DEPLOY_DOCKER_LOCAL_TAG}
    echo

    if [[ -z "${DEPLOY_DOCKERFILE}" ]] ; then
        echo "Error: DEPLOY_DOCKERFILE is required"
        return 1
    fi

    if [[ -z "${DEPLOY_DOCKER_LOCAL_TAG}" ]] ; then
        echo "Error: DEPLOY_DOCKER_LOCAL_TAG is required"
        return 1
    fi

    if [[ ! -z "${DEPLOY_GITHUB_MACHINE_USER_KEY_FINGERPRINT}" ]] ; then

        fingerprint="$( echo ${DEPLOY_GITHUB_MACHINE_USER_KEY_FINGERPRINT} | tr -d : )"

        eval keyfile="~/.ssh/id_${fingerprint}"

        if [[ ! -f ${keyfile} ]] ; then
            echo "Error: Unable to find machine user key file"
            echo "- fingerprint: ${fingerprint}"
            echo "- keyfile: ${keyfile}"

            eval keyfile="~/.ssh/id_circleci_github"

            if [[ ! -f ${keyfile} ]] ; then
                echo "Error: Unable to find circle github key file"
                echo "- keyfile: ${keyfile}"
                return 1
            fi

        fi

        echo "Using GITHUB_MACHINE_USER_KEY=${keyfile}"

    fi

    docker build \
        --rm=false \
        ${NPM_TOKEN:+ --build-arg NPM_TOKEN=$NPM_TOKEN}\
        ${keyfile:+ --build-arg GITHUB_MACHINE_USER_KEY="$(< ${keyfile} )"} \
        -t ${DEPLOY_DOCKER_LOCAL_TAG} \
        -f ${DEPLOY_DOCKERFILE} \
        .

}


##
## ecr
##

function ecr_login () {

    echo
    echo Logging in to ECR
    echo DEPLOY_AWS_PROFILE: ${DEPLOY_AWS_PROFILE}
    echo DEPLOY_AWS_ACCOUNT: ${DEPLOY_AWS_ACCOUNT}
    echo DEPLOY_ECR_ACCOUNT: ${DEPLOY_ECR_ACCOUNT}
    echo

    # check environment variables
    check_environment

    login_command=$(
        aws --profile=${DEPLOY_AWS_PROFILE} ecr get-login --no-include-email
    )

    if [[ ! "$login_command" =~ "https://${DEPLOY_AWS_ACCOUNT}" ]]; then
        echo Error: Login command does not match DEPLOY_AWS_ACCOUNT: ${DEPLOY_AWS_ACCOUNT}
        echo Error: Check that DEPLOY_AWS_ROLE="${DEPLOY_AWS_ROLE}" is as valid role in DEPLOY_AWS_ACCOUNT="${DEPLOY_AWS_ACCOUNT}"
        echo login_command: ${login_command}
        return 1
    fi

     login_command=$(
        echo ${login_command} \
        | sed -e "s/${DEPLOY_AWS_ACCOUNT}/${DEPLOY_ECR_ACCOUNT}/" \
        | sed -e "s/-e none//"
    )

    if [[ ! "$login_command" =~ "https://${DEPLOY_ECR_ACCOUNT}" ]]; then
        echo Error: Login command does not match DEPLOY_ECR_ACCOUNT: ${DEPLOY_ECR_ACCOUNT}
        echo login_command: ${login_command}
        return 1
    fi

    eval ${login_command}
}

function ecr_tag_image () {

    local base_tag=$1
    local target_tag=$2

    echo
    echo Tagging image
    echo base_tag: ${base_tag}
    echo target_tag: ${target_tag}
    echo

    if [[ -z "${base_tag}" || -z "${target_tag}" ]] ; then
        echo "Error: usage: ecr_tag_image <$base_tag> <target_tag>"
        return 1
    fi

    docker tag $base_tag $target_tag

    if [[ "$?" == 1 ]] ; then
        echo "Error tagging target_tag=${target_tag}"
        return 1
    fi

}

function ecr_pull_image () {

    local remote_tag=$1

    echo
    echo Pulling and Retagging image
    echo remote_tag: ${remote_tag}
    echo

    if [[ -z "${remote_tag}" ]] ; then
        echo "Error: usage: ecr_pull_and_retag_image <$remote_tag>"
        return 1
    fi

    docker pull $remote_tag

    if [[ "$?" == 1 ]] ; then
        echo "Error pulling remote_tag=${remote_tag}"
        return 1
    fi

}

function ecr_push_image () {

    local image=$1

    echo
    echo Pushing image
    echo image: ${image}
    echo

    docker push $image

    if [[ $? != 0 ]] ; then
        echo "Error: Unable to push image, ${image}"
        exit 1
    fi

}

##
## ecs
##

function ecs_deploy_task () {

    local image_tag="$1"
    local subfamily="$2"

    local ecr_repo_name="${DEPLOY_ECR_REPO:-$DEPLOY_APP_NAME}"

    local image="${DEPLOY_ECR_HOST}/${ecr_repo_name}:${image_tag}"

    echo
    echo Deploying ECS task
    echo image_tag: ${image_tag}
    echo subfamily: ${subfamily}
    echo image: ${image}
    echo

    if [[ -z "$subfamily" ]] ; then
        family="${DEPLOY_APP_NAME}"
    else
        family="${DEPLOY_APP_NAME}-${subfamily}"
    fi
    service="${family}"

    echo
    echo "Registering new task definition, family: ${family}"
    echo

    task_def_template=${DEPLOY_TASK_DEF_TEMPLATE//-FAMILY/-$subfamily}

    if [[ ! -f ${task_def_template} ]] ; then
        echo "Unable to find task definition template, task_def_template: ${task_def_template}"
        exit 1
    fi

    task_def=$( \
        DEPLOY_IMAGE_NAME=${image} \
        DEPLOY_IMAGE_TAG=${image_tag} \
        DEPLOY_ECS_CLUSTER_NAME=${DEPLOY_ECS_CLUSTER_NAME} \
        DEPLOY_SUBFAMILY=${subfamily} \
        DEPLOY_AWS_REGION=${DEPLOY_AWS_REGION} \
        DEPLOY_APP_NAME=${family} \
        ${DEPLOY_ENVSUBST_COMMAND:-envsubst} < "${task_def_template}"
    )

    if [[ "${DEPLOY_ECS_REQUIRES_COMPATIBILITIES}" == "FARGATE" ]] ; then
        echo "Info: DEPLOY_ECS_REQUIRES_COMPATIBILITIES is FARGATE"
        requires_fargate="yes"
    fi

    revision_target=$( \
        aws ecs register-task-definition \
            --profile ${DEPLOY_AWS_PROFILE} \
            --family "${family}" \
            --container-definitions "$task_def" \
            ${requires_fargate:+ --requires-compatibilities FARGATE} \
            ${requires_fargate:+ --network-mode awsvpc} \
            ${requires_fargate:+ --cpu ${DEPLOY_ECS_FARGATE_CPU:-256}} \
            ${requires_fargate:+ --memory ${DEPLOY_ECS_FARGATE_MEMORY:-512}} \
            ${DEPLOY_ECS_EXECUTION_ROLE_NAME:+ --execution-role-arn arn:aws:iam::${DEPLOY_AWS_ACCOUNT}:role/${DEPLOY_ECS_EXECUTION_ROLE_NAME}} \
            ${DEPLOY_TASK_ROLE_NAME:+ --task-role-arn arn:aws:iam::${DEPLOY_AWS_ACCOUNT}:role/${DEPLOY_TASK_ROLE_NAME}} \
            | $JQ '.taskDefinition.taskDefinitionArn' \
    )

    if [[ -z "$revision_target" ]] ; then
        echo "Failed to register task definition"
        exit 1
    fi
    echo "Target Revision: $revision_target"

    if [ ! -z "${DEPLOY_NO_SERVICE}" ] ; then
      echo "Skipping service deploy, DEPLOY_NO_SERVICE: ${DEPLOY_NO_SERVICE}"
      return 0
    fi

    echo
    echo Updating service
    echo service: ${service}
    echo revision_target: ${revision_target}
    echo

    revision_actual=$( \
        aws ecs update-service \
            --profile ${DEPLOY_AWS_PROFILE} \
            --cluster ${DEPLOY_ECS_CLUSTER_NAME} \
            --service ${service} \
            --task-definition $revision_target \
            | $JQ '.service.taskDefinition' \
        )

    if [[ "$revision_target" != "$revision_actual" ]] ; then
        echo "Error updating service. Target does not match actual: ${revision_target} != ${revision_actual} "
        exit 1
    fi

    # part one of some bash craziness to pass the revision_target
    key="revision_target_$( echo $family | tr -s - _ )"
    eval "$key=${revision_target}"
    echo key : $key : ${!key}

}

function ecs_verify_deploy () {

    local subfamily="$1"

    if [[ -z "$subfamily" ]] ; then
        family="${DEPLOY_APP_NAME}"
        service="${DEPLOY_APP_NAME}"
    else
        family="${DEPLOY_APP_NAME}-${subfamily}"
        service="${DEPLOY_APP_NAME}-${subfamily}"
    fi

    # part two of some bash craziness to receive the revision_target
    key="revision_target_$( echo $family | tr -s - _ )"
    revision_target=${!key}

    echo
    echo Verifying deploy
    echo revision_target: $revision_target
    echo

    # wait for older revisions to disappear
    for attempt in {1..100}; do

        revision_deployed=$( \
            aws ecs describe-services \
                --profile ${DEPLOY_AWS_PROFILE} \
                --cluster ${DEPLOY_ECS_CLUSTER_NAME} \
                --services ${service} \
            | $JQ ".services[0].deployments | .[] | select(.taskDefinition != \"$revision_target\") | .taskDefinition" \
        )

        if [[ -z "$revision_deployed" ]] ; then
            echo "Success: Deployed!"
            return 0
        fi

        echo "Waiting for update:"
        echo "  revision_target: ${revision_target}"
        echo "  revision_deployed: ${revision_deployed}"
        sleep 5

    done

    echo "Error: Service update took too long."
    exit 1
}

function ecs_deploy () {

  # check environment variables
  check_environment

  # setup aws
  aws_configure
  ecr_login

  _ecs_deploy_image
  _ecs_update_service
}

function ecs_deploy_image () {

    # check environment variables
    check_environment

    # setup aws
    aws_configure
    ecr_login

    _ecs_deploy_image
}

function ecs_update_service () {

    # check environment variables
    check_environment

    # setup aws
    aws_configure
    ecr_login

    _ecs_update_service
}


function _get_target_image_tag() {

  local local_target_tag="${DEPLOY_CURRENT_TIME}-${DEPLOY_SHA1}"

  if [ ! -z "$DEPLOY_ADD_ENV_TO_TAG" ]; then
    local_target_tag="${local_target_tag}-${DEPLOY_ADD_ENV_TO_TAG:-$FLM_ENV}"
  fi

  echo $local_target_tag
}

function _ecs_deploy_image () {

    #
    # push images
    #

    local ecr_repo_name="${DEPLOY_ECR_REPO:-$DEPLOY_APP_NAME}"

    if [[ ! -z "${DEPLOY_RETAG_AND_PUSH}" ]] ; then

        remote_tag="${DEPLOY_ECR_HOST}/${ecr_repo_name}:${DEPLOY_RETAG_REMOTE_TAG}"
        target_tag="${DEPLOY_ECR_HOST}/${ecr_repo_name}:${DEPLOY_RETAG_TARGET_TAG}"

        echo
        echo DEPLOY_RETAG_AND_PUSH: ${DEPLOY_RETAG_AND_PUSH}
        echo remote_tag: ${remote_tag}
        echo target_tag: ${target_tag}
        echo

        ecr_pull_image \
            $remote_tag

        ecr_tag_image \
            $remote_tag \
            $target_tag

        ecr_push_image \
            $target_tag

        DEPLOY_IMAGE="${target_tag}"

    else

        target_tag="${DEPLOY_ECR_HOST}/${ecr_repo_name}:$(_get_target_image_tag)"

        echo
        echo Pushing primary tag
        echo target_tag: ${target_tag}
        echo

        ecr_tag_image \
            $DEPLOY_DOCKER_LOCAL_TAG \
            $target_tag

        ecr_push_image \
            $target_tag

        if [[ ! -z "$DEPLOY_PUSH_SECONDARY_TAG" ]] ; then

            secondary_tag="${DEPLOY_ECR_HOST}/${ecr_repo_name}:${DEPLOY_PUSH_SECONDARY_TAG}"

            echo
            echo Pushing secondary tag
            echo secondary_tag: ${secondary_tag}
            echo

            ecr_tag_image \
                $target_tag \
                $secondary_tag

            ecr_push_image \
                $secondary_tag
        fi

        DEPLOY_IMAGE="${target_tag}"

    fi

    if [[ -z "${DEPLOY_IMAGE}" ]] ; then
        echo "Error: deploy image is undefined, DEPLOY_IMAGE=${DEPLOY_IMAGE}"
        exit 1
    fi

}

function _ecs_update_service() {

    DEPLOY_IMAGE_TAG="${DEPLOY_IMAGE_TAG:-$(_get_target_image_tag)}"

    #
    # deploy task defs
    #

    # deploy all the tasks first...
    if [[ -z "$DEPLOY_ECS_FAMILIES" ]] ; then

        ecs_deploy_task $DEPLOY_IMAGE_TAG
        ecs_verify_deploy

    else

        for family in $DEPLOY_ECS_FAMILIES
        do
            ecs_deploy_task $DEPLOY_IMAGE_TAG $family
        done

        for family in $DEPLOY_ECS_FAMILIES
        do
            ecs_verify_deploy $family
        done

    fi

}


##
## lambda
##

function _lambda_init_zip_vars () {

    # check environment variables
    if [[ -z "${DEPLOY_LAMBDA_FUNCTION_NAME}" ]] ; then
        echo "Error: DEPLOY_LAMBDA_FUNCTION_NAME is required"
        exit 1
    fi

    if [[ -z "${DEPLOY_LAMBDA_ZIP_FULLPATH}" ]] ; then
        DEPLOY_LAMBDA_ZIP_DIR="${DEPLOY_LAMBDA_ZIP_DIR:-/tmp/deploy_artifacts}"
        mkdir -p ${DEPLOY_LAMBDA_ZIP_DIR}

        if [[ -z "${DEPLOY_LAMBDA_ZIP_FILENAME}" ]] ; then
            DEPLOY_LAMBDA_ZIP_FILENAME="${DEPLOY_LAMBDA_FUNCTION_NAME}.zip"
        fi

        DEPLOY_LAMBDA_ZIP_FULLPATH="${DEPLOY_LAMBDA_ZIP_DIR}/${DEPLOY_LAMBDA_ZIP_FILENAME}"
    fi

}

function lambda_package_zip () {

    _lambda_init_zip_vars

    if [[ -z "${DEPLOY_DEBUG}" ]] ; then
        DEPLOY_LAMBDA_ZIP_QUIET="-q"
    else
        DEPLOY_LAMBDA_ZIP_QUIET=""
    fi

    # zip into deploy package
    DEPLOY_LAMBDA_SOURCE_DIR="${DEPLOY_LAMBDA_SOURCE_DIR:-.}"

    pushd "${DEPLOY_LAMBDA_SOURCE_DIR:-.}"
    zip ${DEPLOY_LAMBDA_ZIP_QUIET} -r ${DEPLOY_LAMBDA_ZIP_FULLPATH} . -x "*.git*"
    popd

    if [[ "$?" != "0" ]] ; then
        echo "Error: Failed to create lambda zip archive"
        exit 1
    fi

}

function lambda_copy_zip_to_s3 () {

    aws_configure

    _lambda_init_zip_vars

    if [[ -z "${DEPLOY_LAMBDA_S3_BUCKET}" ]] ; then
        echo "Error: DEPLOY_LAMBDA_S3_BUCKET is required"
        exit 1
    fi

    s3_cp_opts="--acl=bucket-owner-full-control --only-show-errors"

    # copy to version-specific or commit-hash key
    if [[ ! -z "${DEPLOY_LAMBDA_ZIP_VERSION}" ]] ; then
        aws --profile "${DEPLOY_AWS_PROFILE}" \
            s3 cp ${s3_cp_opts} \
            ${DEPLOY_LAMBDA_ZIP_FULLPATH} \
            s3://${DEPLOY_LAMBDA_S3_BUCKET}/${DEPLOY_LAMBDA_FUNCTION_NAME}/archive/${DEPLOY_LAMBDA_FUNCTION_NAME}-${DEPLOY_LAMBDA_ZIP_VERSION}.zip

        if [[ "$?" != "0" ]] ; then
            echo "Error: Failed to copy lambda zip to S3 (${DEPLOY_LAMBDA_ZIP_VERSION})"
            exit 1
        fi

    elif [[ ! -z "${DEPLOY_SHA1}" ]] ; then
        aws --profile "${DEPLOY_AWS_PROFILE}" \
            s3 cp ${s3_cp_opts} \
            ${DEPLOY_LAMBDA_ZIP_FULLPATH} \
            s3://${DEPLOY_LAMBDA_S3_BUCKET}/${DEPLOY_LAMBDA_FUNCTION_NAME}/archive/${DEPLOY_LAMBDA_FUNCTION_NAME}-${DEPLOY_SHA1}.zip

        if [[ "$?" != "0" ]] ; then
            echo "Error: Failed to copy lambda zip to S3 (${DEPLOY_SHA1})"
            exit 1
        fi
    fi

    # copy to latest key
    aws --profile "${DEPLOY_AWS_PROFILE}" \
        s3 cp ${s3_cp_opts} \
        ${DEPLOY_LAMBDA_ZIP_FULLPATH} \
        s3://${DEPLOY_LAMBDA_S3_BUCKET}/${DEPLOY_LAMBDA_FUNCTION_NAME}/${DEPLOY_LAMBDA_FUNCTION_NAME}.zip

    if [[ "$?" != "0" ]] ; then
        echo "Error: Failed to copy lambda zip to S3 (latest)"
        exit 1
    fi

}

function lambda_update_from_s3 () {

    # check environment variables
    if [[ -z "${DEPLOY_AWS_ACCOUNT}" ]] ; then
        echo "Error: DEPLOY_AWS_ACCOUNT is required"
        exit 1
    fi

    if [[ -z "${DEPLOY_LAMBDA_FUNCTION_NAME}" ]] ; then
        echo "Error: DEPLOY_LAMBDA_FUNCTION_NAME is required"
        exit 1
    fi

    if [[ -z "${DEPLOY_LAMBDA_FUNCTION_ROLE}" ]] ; then
        echo "Error: DEPLOY_LAMBDA_FUNCTION_ROLE is required"
        exit 1
    fi

    if [[ -z "${DEPLOY_LAMBDA_S3_BUCKET}" ]] ; then
        echo "Error: DEPLOY_LAMBDA_S3_BUCKET is required"
        exit 1
    fi

    # setup aws
    aws_configure


    lambda_env_template="${DEPLOY_LAMBDA_FUNCTION_ENV_TEMPLATE:-environment.txt}"

    if [[ -f ${lambda_env_template} ]] ; then
      lambda_env=$( \
          ${DEPLOY_ENVSUBST_COMMAND:-envsubst} < "${lambda_env_template}"
      )
    fi

    echo "Info: Attemping to update existing lambda function"

    lambda_role="arn:aws:iam::${DEPLOY_AWS_ACCOUNT}:role/${DEPLOY_LAMBDA_FUNCTION_ROLE}"

    lambda_function_arn=$( \
        aws lambda update-function-configuration \
            --profile       "${DEPLOY_AWS_PROFILE}" \
            --function-name "${DEPLOY_LAMBDA_FUNCTION_NAME}" \
            --description   "${DEPLOY_LAMBDA_FUNCTION_DESCRIPTION}" \
            --handler       "${DEPLOY_LAMBDA_FUNCTION_HANDLER}" \
            --memory-size   "${DEPLOY_LAMBDA_FUNCTION_MEMORY_SIZE}" \
            --runtime       "${DEPLOY_LAMBDA_FUNCTION_RUNTIME}" \
            --timeout       "${DEPLOY_LAMBDA_FUNCTION_TIMEOUT}" \
            --role          "${lambda_role}" \
            ${lambda_env:+ --environment "${lambda_env}"} \
        | $JQ ".FunctionArn"
    )

    if [[ -z "${lambda_function_arn}" ]] ; then
        echo "Error: Failed to update lambda function configuration"
        exit 1
    fi

    # update lambda function
    lambda_function_sha256=$( \
        aws lambda update-function-code \
            --profile       "${DEPLOY_AWS_PROFILE}" \
            --function-name "${DEPLOY_LAMBDA_FUNCTION_NAME}" \
            --s3-bucket     "${DEPLOY_LAMBDA_S3_BUCKET}" \
            --s3-key        "${DEPLOY_LAMBDA_FUNCTION_NAME}/${DEPLOY_LAMBDA_FUNCTION_NAME}.zip" \
        | $JQ ".CodeSha256"
    )

    if [[ -z "${lambda_function_sha256}" ]] ; then
        echo "Error: Failed to update lambda function"
        exit 1
    fi

    if [[ ! -z "${DEPLOY_LAMBDA_ZIP_VERSION}" ]] ; then

        lambda_function_version=$( \
            aws lambda publish-version \
                --profile       "${DEPLOY_AWS_PROFILE}" \
                --function-name "${DEPLOY_LAMBDA_FUNCTION_NAME}" \
                --description   "${DEPLOY_LAMBDA_ZIP_VERSION} created by deployables" \
                --code-sha-256 "${lambda_function_sha256}" \
            | $JQ ".Version"
        )

        if [[ -z "${lambda_function_version}" ]] ; then
        echo "Error: Failed to publish lambda version"
            exit 1
        fi

    fi

}

function lambda_deploy () {

    # check environment variables
    if [[ -z "${DEPLOY_AWS_ACCOUNT}" ]] ; then
        echo "Error: DEPLOY_AWS_ACCOUNT is required"
        exit 1
    fi

    if [[ -z "${DEPLOY_LAMBDA_FUNCTION_NAME}" ]] ; then
        echo "Error: DEPLOY_LAMBDA_FUNCTION_NAME is required"
        exit 1
    fi

    if [[ -z "${DEPLOY_LAMBDA_FUNCTION_ROLE}" ]] ; then
        echo "Error: DEPLOY_LAMBDA_FUNCTION_ROLE is required"
        exit 1
    fi

    # setup aws
    aws_configure

    # use an existing zip, or make a new one
    if [[ ! -z "${DEPLOY_LAMBDA_ZIP_FULLPATH}" ]] && [[ -f "${DEPLOY_LAMBDA_ZIP_FULLPATH}" ]] ; then
        echo "Skipping ... Zip already exists at ${DEPLOY_LAMBDA_ZIP_FULLPATH}"
    else
        lambda_package_zip
    fi

    # check zip for file size limits
    local bytes=$( stat -c%s "$DEPLOY_LAMBDA_ZIP_FULLPATH" )
    DEPLOY_LAMBDA_ZIP_FILESIZE=$(( bytes / 1024 / 1024 ))

    if [[ ! -z "${DEPLOY_LAMBDA_S3_BUCKET}" ]] ; then
      echo "Info: Deploying lambda via S3; DEPLOY_LAMBDA_S3_BUCKET: ${DEPLOY_LAMBDA_S3_BUCKET}"

      # copy the zip to S3
      lambda_copy_zip_to_s3

      lambda_code_parameters=$( echo \
         --s3-bucket "${DEPLOY_LAMBDA_S3_BUCKET}" \
         --s3-key "${DEPLOY_LAMBDA_FUNCTION_NAME}/${DEPLOY_LAMBDA_FUNCTION_NAME}.zip"
      )

    elif [[ "${DEPLOY_LAMBDA_ZIP_FILESIZE}" -lt "50" ]] ; then
      echo "Info: Deploying code directly; Lambda zip file size is less than 50MB"

      lambda_code_parameters=$( echo \
          --zip-file "fileb://${DEPLOY_LAMBDA_ZIP_FULLPATH}"
      )

    else
      echo "Error: Unable to deploy lambda zip larger than 50MB; DEPLOY_LAMBDA_ZIP_FILESIZE: ${DEPLOY_LAMBDA_ZIP_FILESIZE}"
      exit 1
    fi

    lambda_role="arn:aws:iam::${DEPLOY_AWS_ACCOUNT}:role/${DEPLOY_LAMBDA_FUNCTION_ROLE}"

    lambda_env_template="${DEPLOY_LAMBDA_FUNCTION_ENV_TEMPLATE:-environment.txt}"

    if [[ -f ${lambda_env_template} ]] ; then
      lambda_env=$( \
          ${DEPLOY_ENVSUBST_COMMAND:-envsubst} < "${lambda_env_template}"
      )
    fi

    # create lambda function
    echo "Info: Attemping to create lambda function"

    lambda_function_arn=$( \
        aws lambda create-function \
            --profile "${DEPLOY_AWS_PROFILE}" \
            --function-name "${DEPLOY_LAMBDA_FUNCTION_NAME}" \
            --description "${DEPLOY_LAMBDA_FUNCTION_DESCRIPTION}" \
            --timeout "${DEPLOY_LAMBDA_FUNCTION_TIMEOUT}" \
            --memory-size "${DEPLOY_LAMBDA_FUNCTION_MEMORY_SIZE}" \
            --role "${lambda_role}" \
            --handler "${DEPLOY_LAMBDA_FUNCTION_HANDLER}" \
            --runtime "${DEPLOY_LAMBDA_FUNCTION_RUNTIME}" \
            ${lambda_env:+ --environment "${lambda_env}"} \
            ${DEPLOY_LAMBDA_PUBLISH_NEW_VERSION:+ --publish} \
            ${lambda_code_parameters} \
        | $JQ ".FunctionArn"
    )

    # try to update the lamda function if creation failed
    if [[ -z "$lambda_function_arn" ]] ; then

        echo "Info: Creating a new lambda function failed"
        echo "Info: Attemping to update existing lambda function"

        lambda_function_arn=$( \
            aws lambda update-function-configuration \
                --profile "${DEPLOY_AWS_PROFILE}" \
                --function-name "${DEPLOY_LAMBDA_FUNCTION_NAME}" \
                --description "${DEPLOY_LAMBDA_FUNCTION_DESCRIPTION}" \
                --timeout "${DEPLOY_LAMBDA_FUNCTION_TIMEOUT}" \
                --memory-size "${DEPLOY_LAMBDA_FUNCTION_MEMORY_SIZE}" \
                --role "${lambda_role}" \
                --handler "${DEPLOY_LAMBDA_FUNCTION_HANDLER}" \
                --runtime "${DEPLOY_LAMBDA_FUNCTION_RUNTIME}" \
                ${lambda_env:+ --environment "${lambda_env}"} \
            | $JQ ".FunctionArn"
        )

        # update lambda function
        lambda_function_sha256=$( \
          aws lambda update-function-code \
              --profile "${DEPLOY_AWS_PROFILE}" \
              --function-name "${DEPLOY_LAMBDA_FUNCTION_NAME}" \
              ${DEPLOY_LAMBDA_PUBLISH_NEW_VERSION:+ --publish} \
              ${lambda_code_parameters} \
          | $JQ ".CodeSha256"
        )

        if [[ -z "${lambda_function_sha256}" ]] ; then
            echo "Error: Failed to update lambda function"
            exit 1
        fi

    fi

    if [[ -z "$lambda_function_arn" ]] ; then
        echo "Error: Failed to deploy lambda function"
        exit 1
    fi

    if [[ ! -z "${DEPLOY_LAMBDA_EVENT_RULE}" ]] ; then
        DEPLOY_LAMBDA_FUNCTION_ARN="${lambda_function_arn}"
        DEPLOY_LAMBDA_EVENT_BASENAME="${DEPLOY_LAMBDA_EVENT_BASENAME:-$DEPLOY_LAMBDA_FUNCTION_NAME}"
        lambda_deploy_event
    fi

    echo "Info: lambda_deploy completed"
}

function lambda_deploy_event () {
    lambda_event_basename="${1:-$DEPLOY_LAMBDA_EVENT_BASENAME}"
    if [[ -z "${lambda_event_basename}" ]] ; then
        echo "Error: DEPLOY_LAMBDA_EVENT_BASENAME or passing the basename is required for lambda_deploy_event."
        return
    fi

    lambda_function_arn="${DEPLOY_LAMBDA_FUNCTION_ARN}"
    if [[ -z "${lambda_function_arn}" ]] ; then
        echo "Info: No DEPLOY_LAMBDA_FUNCTION_ARN, not deploying event."
        return
    fi

    if [[ -z "${DEPLOY_LAMBDA_EVENT_RULE}" ]] ; then
        echo "Info: No DEPLOY_LAMBDA_EVENT_RULE, not deploying event."
        return
    fi

    if [[ -z "${DEPLOY_LAMBDA_TARGET_INPUT_JSON}" ]] ; then
        echo "Info: No DEPLOY_LAMBDA_TARGET_INPUT_JSON, using default: {}"
        DEPLOY_LAMBDA_TARGET_INPUT_JSON="{}"
    fi

    aws_configure

    event_rule_name="${lambda_event_basename}_rule"
    permission_statement_id="${lambda_event_basename}_permission"

    # this json is a sub-json to something else, so we need to escape the quotes for the awscli
    input_json_escaped=${DEPLOY_LAMBDA_TARGET_INPUT_JSON//\"/\\\"}

    # create or update a cloudwatch event rule
    event_rule_arn=$( \
        aws events put-rule \
            --profile "${DEPLOY_AWS_PROFILE}" \
            --name "${event_rule_name}" \
            --schedule-expression "${DEPLOY_LAMBDA_EVENT_RULE}" \
        | $JQ ".RuleArn"
    )

    # NB this can fail if the permission doesn't exist, this is ok.
    aws lambda remove-permission \
        --profile "${DEPLOY_AWS_PROFILE}" \
        --function-name "${lambda_function_arn}" \
        --statement-id "${permission_statement_id}" \

    # give permissions (statement id needs to be consistent string for this rule)
    aws lambda add-permission \
        --profile "${DEPLOY_AWS_PROFILE}" \
        --function-name "${lambda_function_arn}" \
        --statement-id "${permission_statement_id}" \
        --action "lambda:InvokeFunction" \
        --principal "events.amazonaws.com" \
        --source-arn "${event_rule_arn}"

    # add the lambda target to the rule
    failed_entry_count=$( \
        aws events put-targets \
            --profile "${DEPLOY_AWS_PROFILE}" \
            --rule "${event_rule_name}" \
            --targets "[{ \"Id\" : \"${lambda_event_basename}_target\", \"Arn\": \"${lambda_function_arn}\" ${DEPLOY_LAMBDA_TARGET_INPUT_JSON:+,\"Input\": \"${input_json_escaped}\"}}]" \
        | $JQ ".FailedEntryCount"
    )

    if [[ "${failed_entry_count}" != "0" ]] ; then
        echo "Error: Failed associating event rule and lambda function"
        exit 1
    fi
}

function deploy_lambda () {
    echo "Deprecated: Please use lambda_deploy()"
    lambda_deploy
}

function deploy_lambda_event () {
    echo "Deprecated: Please use lambda_deploy_event()"
    lambda_deploy_event
}


##
## MAIN
##

# call arguments verbatim:
$@
